{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","height","display","flexDirection","alignItems","justifyContent","card","padding","spacing","marginTop","input","margin","row","width","expir","slash","cvs","buttonWrapper","position","checkout","buttonProgress","top","left","marginLeft","moods","App","props","classes","React","useState","moodIndex","setMoodIndex","name","setName","cardNumber","setCardNumber","expiryMonth","setExpiryMonth","expiryYear","setExpiryYear","setCvs","isLoading","setIsLoading","isError","setIsError","useEffect","count","length","Container","className","maxWidth","CssBaseline","CreditCard","mood","Card","TextField","fullWidth","variant","InputLabelProps","shrink","label","value","onChange","event","target","inputProps","maxLength","inputText","split","join","match","RegExp","placeholder","Typography","Button","color","disabled","onClick","setTimeout","CircularProgress","size","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.740b9b05.chunk.js","sourcesContent":["import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { CreditCard } from 'react-kawaii'\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: theme.spacing(),\n    marginTop: theme.spacing(),\n  },\n  input: {\n    margin: theme.spacing(),\n  },\n  row: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  expir: {\n    width: 120,\n  },\n  slash: {\n    margin: theme.spacing(),\n  },\n  cvs: {\n    width: 60,\n  },\n  buttonWrapper: {\n    marginTop: theme.spacing(),\n    width: '100%',\n    position: 'relative',\n  },\n  checkout: {\n    width: '100%',\n  },\n  buttonProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}))\n\nconst moods = ['shocked', 'happy', 'excited', 'blissful', 'lovestruck']\n\nfunction App (props) {\n  const classes = useStyles(props)\n  const [moodIndex, setMoodIndex] = React.useState(1)\n  const [name, setName] = React.useState('')\n  const [cardNumber, setCardNumber] = React.useState('')\n  const [expiryMonth, setExpiryMonth] = React.useState('')\n  const [expiryYear, setExpiryYear] = React.useState('')\n  const [cvs, setCvs] = React.useState('')\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [isError, setIsError] = React.useState(false)\n\n  React.useEffect(() => {\n    const count = (name ? 1 : 0) + (cardNumber.length === 19 ? 1 : 0) + (expiryMonth.length === 2 && expiryYear.length === 4 && cvs.length === 3 ? 1 : 0) + (isLoading ? 1 : 0)\n    setMoodIndex(count)\n  }, [cardNumber, cvs, expiryMonth, expiryYear, isLoading, name])\n\n  return (\n    <Container className={classes.container} maxWidth='sm'>\n      <CssBaseline />\n      <CreditCard mood={isError ? 'ko' : moods[moodIndex]} />\n      <Card className={classes.card}>\n        <TextField\n          className={classes.input}\n          fullWidth\n          variant='outlined'\n          margin='dense'\n          InputLabelProps={{ shrink: true }}\n          label='Name'\n          value={name}\n          onChange={(event) => {\n            setIsError(false)\n            setName(event.target.value)\n          }}\n        />\n        <TextField\n          className={classes.input}\n          fullWidth\n          variant='outlined'\n          margin='dense'\n          inputProps={{ maxLength: 19 }}\n          InputLabelProps={{ shrink: true }}\n          label='Card Number'\n          value={cardNumber}\n          onChange={(event) => {\n            let inputText = event.target.value.split('-').join('')\n            if (inputText.length > 0) {\n              inputText = inputText.match(new RegExp('.{1,4}', 'g')).join('-')\n            }\n            setIsError(false)\n            setCardNumber(inputText)\n          }}\n        />\n        <div className={classes.row}>\n          <div className={classes.row}>\n            <TextField\n              className={classes.expir}\n              variant='outlined'\n              margin='dense'\n              inputProps={{ maxLength: 2 }}\n              InputLabelProps={{ shrink: true }}\n              label='Expiry Month'\n              placeholder='MM'\n              value={expiryMonth}\n              onChange={(event) => {\n                setIsError(false)\n                setExpiryMonth(event.target.value)\n              }}\n            />\n            <Typography className={classes.slash}>/</Typography>\n            <TextField\n              className={classes.expir}\n              variant='outlined'\n              margin='dense'\n              inputProps={{ maxLength: 4 }}\n              InputLabelProps={{ shrink: true }}\n              label='Expiry Year'\n              placeholder='YYYY'\n              value={expiryYear}\n              onChange={(event) => {\n                setIsError(false)\n                setExpiryYear(event.target.value)\n              }}\n            />\n          </div>\n          <TextField\n            className={classes.expir}\n            variant='outlined'\n            margin='dense'\n            inputProps={{ maxLength: 3 }}\n            InputLabelProps={{ shrink: true }}\n            label='CVS'\n            value={cvs}\n            onChange={(event) => {\n              setIsError(false)\n              setCvs(event.target.value)\n            }}\n          />\n        </div>\n        <div className={classes.buttonWrapper}>\n          <Button\n            className={classes.checkout}\n            variant='outlined'\n            color='primary'\n            disabled={isLoading}\n            onClick={() => {\n              setIsLoading(true)\n              setTimeout(() => {\n                if (moodIndex !== 3) {\n                  setIsError(true)\n                }\n                setIsLoading(false)\n              }, 2000)\n            }}\n          >\n            {'Checkout'}\n          </Button>\n          {isLoading && <CircularProgress size={24} className={classes.buttonProgress} color='secondary' />}\n        </div>\n      </Card>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}